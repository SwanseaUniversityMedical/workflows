name: 'Asset'
inputs:

  name:
    description: "Name of the release asset."
    required: true

  comment-release:
    description: "Release comment creation and update."
    default: "true"

  ##
  # Release tagging
  ##

  release-tag-format:
    description: "Semantic-release Github release tag format."
    default: '${version}'

  ##
  # PR labelling
  ##

  major-colour:
    description: "Colour for the major release label."
    default: 'B60205'

  minor-colour:
    description: "Colour for the minor release label."
    default: '8BD931'

  patch-colour:
    description: "Colour for the patch release label."
    default: 'FBCA04'

  released-colour:
    description: "Colour for the released success label."
    default: 'BFD4F2'

  skipped-colour:
    description: "Colour for the released skipped label."
    default: 'E99695'

  eligible-colour:
    description: "Colour for the release eligible label."
    default: 'D4C5F9'

runs:
  using: "composite"
  steps:
    - name: create pr labels and mark asset eligible
      if: github.event_name == 'pull_request'
      uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
      with:
        script: |
          var name = core.getInput('name').trim();
          
          var ensureLabel = (prefix, name, colour) => {
            var label = `${prefix.trim()}: ${name.trim()}`;
            console.log(`::group::Ensuring [${label}] label exists on repo...`);
            try {
              await github.rest.issues.createLabel({
                owner: context.repo.owner,
                repo: context.repo.repo,
                name: label,
                color: colour
              });
            } catch (error) {
              console.warn(error);
            }
            console.log('::endgroup::');
          };
          
          ensureLabel('major', name, core.getInput('major-colour'));
          ensureLabel('minor', name, core.getInput('minor-colour'));
          ensureLabel('patch', name, core.getInput('patch-colour'));
          ensureLabel('released', name, core.getInput('released-colour'));
          ensureLabel('skipped', name, core.getInput('skipped-colour'));
          ensureLabel('eligible', name, core.getInput('eligible-colour'));
          
          var eligibleLabel = `eligible: ${name}`;
          console.log(`::group::Adding [${eligibleLabel}] label to PR...`);
          try {
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: github.context.event.pull_request.number,
              labels: [eligibleLabel]
            });
          } catch (error) {
            console.warn(error);
          }
          console.log('::endgroup::');

    - name: on pr updated
      if: github.event_name == 'pull_request' && contains(fromJSON(['opened', 'synchronize', 'reopened']), github.event.action)
      shell: bash
      run: |
        echo "Build pr!!!"

    - name: on pr merged
      if: github.event_name == 'pull_request' && github.event.pull_request.merged == true && contains(fromJSON(['closed']), github.event.action)
      shell: bash
      run: |
        echo "Create github release!!!"

    - name: on release
      if: github.event_name == 'release' && contains(fromJSON(['published']), github.event.action)
      shell: bash
      run: |
        echo "Builds release!!!"
