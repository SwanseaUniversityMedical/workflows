name: 'Asset'
inputs:

  name:
    description: "Name of the release asset."
    required: true

  comment-release:
    description: "Release comment creation and update."
    default: "true"

  ##
  # Release tagging
  ##

  release-tag-format:
    description: "Semantic-release Github release tag format."
    default: '${version}'

  ##
  # PR labelling
  ##

  major-colour:
    description: "Colour for the major release label."
    default: 'B60205'

  minor-colour:
    description: "Colour for the minor release label."
    default: '8BD931'

  patch-colour:
    description: "Colour for the patch release label."
    default: 'FBCA04'

  released-colour:
    description: "Colour for the released success label."
    default: 'BFD4F2'

  skipped-colour:
    description: "Colour for the released skipped label."
    default: 'E99695'

  eligible-colour:
    description: "Colour for the release eligible label."
    default: 'D4C5F9'

runs:
  using: "composite"
  steps:
    - name: create pr labels and mark asset eligible for release
      if: github.event_name == 'pull_request'
      uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
      env:
        input_ctx: ${{ toJSON(inputs) }}
        github_ctx: ${{ toJSON(github) }}
      with:
        script: |
          const inputs = JSON.parse(process.env.input_ctx);
          const github_ctx = JSON.parse(process.env.github_ctx);
          
          var name = inputs['name'].trim();
          
          var ensureLabel = async (prefix, name, colour) => {
            var label = `${prefix.trim()}: ${name.trim()}`;
            console.log(`::group::Ensuring [${label}] label exists on repo...`);
            try {
              await github.rest.issues.createLabel({
                owner: context.repo.owner,
                repo: context.repo.repo,
                name: label,
                color: colour
              });
            } catch (error) {
              console.log(error);
            }
            console.log('::endgroup::');
          };
          
          await ensureLabel('major', name, inputs['major-colour']);
          await ensureLabel('minor', name, inputs['minor-colour']);
          await ensureLabel('patch', name, inputs['patch-colour']);
          await ensureLabel('released', name, inputs['released-colour']);
          await ensureLabel('skipped', name, inputs['skipped-colour']);
          await ensureLabel('eligible', name, inputs['eligible-colour']);
          
          var eligibleLabel = `eligible: ${name}`;
          console.log(`::group::Adding [${eligibleLabel}] label to PR...`);
          try {
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: github_ctx.event.pull_request.number,
              labels: [eligibleLabel]
            });
          } catch (error) {
            console.log(error);
          }
          console.log('::endgroup::');

    - name: on pr updated
      if: >-
        github.event_name == 'pull_request' && 
        contains(fromJSON('["opened", "synchronize", "reopened"]'), github.event.action)
      uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
      env:
        input_ctx: ${{ toJSON(inputs) }}
        github_ctx: ${{ toJSON(github) }}
      with:
        script: |
          const inputs = JSON.parse(process.env.input_ctx);
          const github_ctx = JSON.parse(process.env.github_ctx);
          
          core.notice(`Running on pull request update [pr-${github_ctx.event.pull_request.number}].`);

    - name: on pr merged
      if: >
        github.event_name == 'pull_request' && 
        github.event.pull_request.merged == true && 
        contains(fromJSON('["closed"]'), github.event.action)
      uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
      with:
        script: |
          core.notice('Creating release.');

    - name: on pr merged determine release version
      id: determine-release
      if: >
        github.event_name == 'pull_request' && 
        github.event.pull_request.merged == true && 
        contains(fromJSON('["closed"]'), github.event.action)
      uses: SwanseaUniversityMedical/workflows/.github/actions/determine-bump@v2.0.0-determine-bump-action
      with:
        name: ${{ inputs.name }}
        release-tag-format: ${{ inputs.release-tag-format }}

    - name: on new release version
      if: >
        github.event_name == 'pull_request' && 
        github.event.pull_request.merged == true && 
        contains(fromJSON('["closed"]'), github.event.action) &&
        steps.determine-release.outputs.new-release-published == 'true'
      uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
      env:
        input_ctx: ${{ toJSON(inputs) }}
        github_ctx: ${{ toJSON(github) }}
        release_ctx: ${{ toJSON(steps.determine-release) }}
      with:
        script: |
          const inputs = JSON.parse(process.env.input_ctx);
          const github_ctx = JSON.parse(process.env.github_ctx);
          const release_ctx = JSON.parse(process.env.release_ctx);
          
          core.notice(`Creating release [${release_ctx.outputs.release-version}] with tag [${release_ctx.outputs.git-tag}].`);

    - name: on release
      if: github.event_name == 'push'
      uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
      env:
        input_ctx: ${{ toJSON(inputs) }}
        github_ctx: ${{ toJSON(github) }}
      with:
        script: |
          const inputs = JSON.parse(process.env.input_ctx);
          const github_ctx = JSON.parse(process.env.github_ctx);
          
          core.notice(`Running on release tag [${github_ctx.ref_name}].`);
