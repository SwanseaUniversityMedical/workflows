name: 'Bulk Release Container'
inputs:
  name:
    description: "Name of the release asset."
    required: true

  comment-header:
    description: "Header line for the Release summary."
    default: ":rocket: :whale: Build Release Container"

  comment-enabled:
    description: "Release comment creation and update."
    default: "true"

  build-file:
    description: "Path to the container file."
    required: true

  build-context:
    description: "Path to the build root dir."
    default: '.'

  test-flags:
    description: "Arguments passed to docker run."
    default: ''

  test-args:
    description: "Arguments passed to the container."
    default: ''

  registry:
    description: "URL of the container registry."
    required: true

  registry-user:
    description: "Username for the container registry."
    required: true

  registry-repo:
    description: "Repo within container registry project."
    required: true

  registry-extra-tag-command:
    description: "Extra tag to push release container."
    default: ''

  release-info:
    description: "Release information json blob."
    required: true

  cosign-public-key:
    description: "Public key for cosigning images."
    required: false

  registry-token:
    description: "Authentication token for the container registry."
    required: true

  cosign-private-key:
    description: "Private key for cosigning images."
    required: false

  cosign-password:
    description: "Private key password for cosigning images."
    required: false

runs:
  using: "composite"
  steps:

    - name: install cosign
      if: ${{ contains(fromJSON('["true"]'), fromJSON(inputs.release-info).new-release-published) && inputs.cosign-public-key != '' }}
      uses: sigstore/cosign-installer@d7d6bc7722e3daa8354c50bcb52f4837da5e9b6a # v3.8.1

    - name: forward proxy settings
      if: ${{ contains(fromJSON('["true"]'), fromJSON(inputs.release-info).new-release-published)  }}
      shell: bash
      run: |
        echo "HTTP_PROXY=$HTTP_PROXY" >> $GITHUB_ENV
        echo "HTTPS_PROXY=$HTTPS_PROXY" >> $GITHUB_ENV
        echo "NO_PROXY=$NO_PROXY" >> $GITHUB_ENV

    - name: install buildx
      if: ${{ contains(fromJSON('["true"]'), fromJSON(inputs.release-info).new-release-published)  }}
      uses: docker/setup-buildx-action@b5ca514318bd6ebac0fb2aedd5d36ec1b5c232a2 # v3
      with:
        driver-opts: |
          env.http_proxy=${{ env.HTTP_PROXY }}
          env.https_proxy=${{ env.HTTPS_PROXY }}
          "env.no_proxy='${{ env.NO_PROXY }}'"
        buildkitd-config-inline: |
          [registry."docker.io"]
            mirrors = ["https://harbor.ukserp.ac.uk/proxycache"]
          [registry."quay.io"]
            mirrors = ["https://harbor.ukserp.ac.uk/quaycache"]
          [registry."ghcr.io"]
            mirrors = ["https://harbor.ukserp.ac.uk/ghcrcache"]
          [registry."mcr.microsoft.com"]
            mirrors = ["https://harbor.ukserp.ac.uk/microsoftcache"]

    - name: login to container registry
      if: ${{ contains(fromJSON('["true"]'), fromJSON(inputs.release-info).new-release-published)  }}
      uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3
      with:
        registry: ${{ inputs.registry }}
        username: ${{ inputs.registry-user }}
        password: ${{ inputs.registry-token }}

    - name: new release
      if: ${{ contains(fromJSON('["true"]'), fromJSON(inputs.release-info).new-release-published)  }}
      shell: bash
      run: |
        echo "${SUMMARY}" >> "$GITHUB_STEP_SUMMARY"
      env:
        SUMMARY: |
          #### ${{ inputs.comment-header }} - ${{ inputs.name }} - :label: Commit: ${{ github.sha }}
          :label: New version will be ${{ fromJSON(inputs.release-info).release-version }}  

    - name: skipped release
      if: ${{ !contains(fromJSON('["true"]'), fromJSON(inputs.release-info).new-release-published) }}
      shell: bash
      run: |
        echo "${SUMMARY}" >> "$GITHUB_STEP_SUMMARY"
      env:
        SUMMARY: |
          #### ${{ inputs.comment-header }} - ${{ inputs.name }} - :label: Commit: ${{ github.sha }}  
          :desert_island: Skipping release!

    - name: cache container metadata
      if: ${{ contains(fromJSON('["true"]'), fromJSON(inputs.release-info).new-release-published)  }}
      uses: docker/metadata-action@902fa8ec7d6ecbf8d84d538b9b233a880e428804 # v5
      id: branch-recent-meta
      with:
        images: |
          ${{ inputs.registry }}/${{ inputs.registry-repo }}
        tags: |
          type=ref,event=branch,prefix=rc-

    - name: pr cache container metadata
      if: ${{ contains(fromJSON('["true"]'), fromJSON(inputs.release-info).new-release-published)  }}
      uses: docker/metadata-action@902fa8ec7d6ecbf8d84d538b9b233a880e428804 # v5
      id: pr-recent-meta
      with:
        images: |
          ${{ inputs.registry }}/${{ inputs.registry-repo }}
        tags: |
          type=raw,value=pr-recent

    - name: rc cache container metadata
      if: ${{ contains(fromJSON('["true"]'), fromJSON(inputs.release-info).new-release-published)  }}
      uses: docker/metadata-action@902fa8ec7d6ecbf8d84d538b9b233a880e428804 # v5
      id: rc-recent-meta
      with:
        images: |
          ${{ inputs.registry }}/${{ inputs.registry-repo }}
        tags: |
          type=raw,value=rc-recent

    - name: rc container metadata
      if: ${{ contains(fromJSON('["true"]'), fromJSON(inputs.release-info).new-release-published)  }}
      uses: docker/metadata-action@902fa8ec7d6ecbf8d84d538b9b233a880e428804 # v5
      id: rc-meta
      with:
        images: |
          ${{ inputs.registry }}/${{ inputs.registry-repo }}
        tags: |
          type=raw,value=rc-${{ fromJSON(inputs.release-info).release-version }}

    - name: release container metadata
      if: ${{ contains(fromJSON('["true"]'), fromJSON(inputs.release-info).new-release-published)  }}
      uses: docker/metadata-action@902fa8ec7d6ecbf8d84d538b9b233a880e428804 # v5
      id: meta
      with:
        images: |
          ${{ inputs.registry }}/${{ inputs.registry-repo }}
        tags: |
          type=raw,value=${{ fromJSON(inputs.release-info).release-version }}

    - name: build rc container
      if: ${{ contains(fromJSON('["true"]'), fromJSON(inputs.release-info).new-release-published)  }}
      uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6
      id: build-rc
      with:
        file: ${{ inputs.build-file }}
        context: ${{ inputs.build-context }}
        tags: |
          ${{ steps.rc-meta.outputs.tags }}
          ${{ steps.branch-recent-meta.outputs.tags }}
          ${{ steps.rc-recent-meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        push: true
        github-token: ${{ github.token }}
        provenance: true
        cache-to: type=inline
        cache-from: |
          type=registry,ref=${{ steps.branch-recent-meta.outputs.tags }}
          type=registry,ref=${{ steps.rc-recent-meta.outputs.tags }}
          type=registry,ref=${{ steps.pr-recent-meta.outputs.tags }}

    - name: build success
      if: steps.build-rc.outcome == 'success'
      shell: bash
      run: |
        echo "${SUMMARY}" >> "$GITHUB_STEP_SUMMARY"
      env:
        SUMMARY: |
          ```
          ${{ steps.rc-meta.outputs.tags }}
          ${{ steps.build-rc.outputs.digest }}
          ```
          :hammer_and_wrench: Build Success  

    - name: build error
      if: failure() && steps.build-rc.outcome == 'failure'
      shell: bash
      run: |
        echo "${SUMMARY}" >> "$GITHUB_STEP_SUMMARY"
      env:
        SUMMARY: ":x: Build Failure"

    - name: cosign image with key
      id: cosign-rc
      if: inputs.cosign-public-key != '' && steps.build-rc.outcome == 'success'
      env:
        COSIGN_PRIVATE_KEY: ${{ inputs.cosign-private-key }}
        COSIGN_PASSWORD: ${{ inputs.cosign-password }}
        COSIGN_PUBLIC_KEY: ${{ inputs.cosign-public-key }}
        TAGS: ${{ steps.rc-meta.outputs.tags }}
        DIGEST: ${{ steps.build-rc.outputs.digest }}
      shell: bash
      run: |
        cosign sign --yes --key env://COSIGN_PRIVATE_KEY "${TAGS}@${DIGEST}"
        cosign verify --key env://COSIGN_PUBLIC_KEY "${TAGS}@${DIGEST}"

    - name: cosign success
      if: steps.cosign-rc.outcome == 'success'
      shell: bash
      run: |
        echo "${SUMMARY}" >> "$GITHUB_STEP_SUMMARY"
      env:
        SUMMARY: ":black_nib: Cosign Success  "

    - name: cosign error
      if: failure() && steps.cosign-rc.outcome == 'failure'
      shell: bash
      run: |
        echo "${SUMMARY}" >> "$GITHUB_STEP_SUMMARY"
      env:
        SUMMARY: ":x: Cosign Failure"

    - name: test
      id: test
      if: (inputs.test-flags != '' || inputs.test-args != '') && steps.build-rc.outcome == 'success' && steps.cosign-rc.outcome != 'failure'
      shell: bash
      run: |
        docker run \
          ${{ inputs.test-flags }} \
          ${{ inputs.registry }}/${{ inputs.registry-repo }}@${{ steps.build-rc.outputs.digest }} \
          ${{ inputs.test-args }}

    - name: test success
      if: steps.test.outcome == 'success'
      shell: bash
      run: |
        echo "${SUMMARY}" >> "$GITHUB_STEP_SUMMARY"
      env:
        SUMMARY: ":eyes: Test Success  "

    - name: test error
      if: failure() && steps.test.outcome == 'failure'
      shell: bash
      run: |
        echo "${SUMMARY}" >> "$GITHUB_STEP_SUMMARY"
      env:
        SUMMARY: ":x: Test Failure"

    - name: create null extra tag
      if: inputs.registry-extra-tag-command == '' && steps.build-rc.outcome == 'success' && steps.cosign-rc.outcome != 'failure' && steps.test.outcome != 'failure'
      shell: bash
      run: |
        echo "EXTRA_TAG=" >> $GITHUB_ENV
        echo "EXTRA_META=" >> $GITHUB_ENV

    - name: create extra tag
      id: extra-tag
      if: inputs.registry-extra-tag-command != '' && steps.build-rc.outcome == 'success' && steps.cosign-rc.outcome != 'failure' && steps.test.outcome != 'failure'
      shell: bash
      run: |
        EXTRA_TAG=$(${{ inputs.registry-extra-tag-command }})
        echo "EXTRA_TAG=$EXTRA_TAG" >> $GITHUB_ENV
        EXTRA_META="${{ inputs.registry }}/${{ inputs.registry-repo }}:${EXTRA_TAG}"
        echo "EXTRA_META=$EXTRA_META" >> $GITHUB_ENV

    - name: extra tag success
      if: steps.extra-tag.outcome == 'success'
      shell: bash
      run: |
        echo "${SUMMARY}" >> "$GITHUB_STEP_SUMMARY"
      env:
        SUMMARY: ":label: New version will also be tagged as ${{ env.EXTRA_TAG }}  "

    - name: extra tag error
      if: failure() && steps.extra-tag.outcome == 'failure'
      shell: bash
      run: |
        echo "${SUMMARY}" >> "$GITHUB_STEP_SUMMARY"
      env:
        SUMMARY: ":x: Extra Tag Command Failure"

    - name: build release container
      if: steps.build-rc.outcome == 'success' && steps.cosign-rc.outcome != 'failure' && steps.test.outcome != 'failure' && steps.extra-tag.outcome != 'failure'
      uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6
      id: build-release
      with:
        file: ${{ inputs.build-file }}
        context: ${{ inputs.build-context }}
        tags: |
          ${{ steps.meta.outputs.tags }}
          ${{ env.EXTRA_META }}
        labels: ${{ steps.meta.outputs.labels }}
        push: true
        github-token: ${{ github.token }}
        provenance: true
        cache-from: |
          type=registry,ref=${{ steps.rc-meta.outputs.tags }}
          type=registry,ref=${{ steps.meta.outputs.tags }}

    - name: build success
      if: steps.build-release.outcome == 'success'
      shell: bash
      run: |
        echo "${SUMMARY}" >> "$GITHUB_STEP_SUMMARY"
      env:
        SUMMARY: |
          ```
          ${{ steps.meta.outputs.tags }}
          ${{ env.EXTRA_META }}
          ${{ steps.build-release.outputs.digest }}
          ```
          :hammer_and_wrench: Release Build Success  

    - name: build error
      if: failure() && steps.build-release.outcome == 'failure'
      shell: bash
      run: |
        echo "${SUMMARY}" >> "$GITHUB_STEP_SUMMARY"
      env:
        SUMMARY: ":x: Release Build Failure"

    - name: cosign image with key
      id: cosign-release
      if: inputs.cosign-public-key != '' && steps.build-release.outcome == 'success'
      env:
        COSIGN_PRIVATE_KEY: ${{ inputs.cosign-private-key }}
        COSIGN_PASSWORD: ${{ inputs.cosign-password }}
        COSIGN_PUBLIC_KEY: ${{ inputs.cosign-public-key }}
        TAGS: ${{ steps.meta.outputs.tags }}
        DIGEST: ${{ steps.build-release.outputs.digest }}
      shell: bash
      run: |
        cosign sign --yes --key env://COSIGN_PRIVATE_KEY "${TAGS}@${DIGEST}"
        cosign verify --key env://COSIGN_PUBLIC_KEY "${TAGS}@${DIGEST}"

    - name: cosign success
      if: steps.cosign-release.outcome == 'success'
      shell: bash
      run: |
        echo "${SUMMARY}" >> "$GITHUB_STEP_SUMMARY"
      env:
        SUMMARY: ":black_nib: Cosign Success  "

    - name: cosign error
      if: failure() && steps.cosign-release.outcome == 'failure'
      shell: bash
      run: |
        echo "${SUMMARY}" >> "$GITHUB_STEP_SUMMARY"
      env:
        SUMMARY: ":x: Cosign Failure"

    - name: find pr comment
      uses: peter-evans/find-comment@3eae4d37986fb5a8592848f6a574fdf654e61f9e # v3
      if: ${{ inputs.comment-enabled == 'true' && contains(fromJSON('["true"]'), fromJSON(inputs.release-info).new-release-published) }}
      id: find-pr-comment
      with:
        issue-number: ${{ fromJSON(inputs.release-info).pr-number }}
        body-includes: ${{ inputs.comment-header }} - ${{ inputs.name }}
        comment-author: "github-actions[bot]"

    - name: comment on release success
      id: release-pr-comment
      if: ${{ inputs.comment-enabled == 'true' && contains(fromJSON('["true"]'), fromJSON(inputs.release-info).new-release-published) }}
      uses: peter-evans/create-or-update-comment@71345be0265236311c031f5c7866368bd1eff043 # v4
      with:
        comment-id: ${{ steps.find-pr-comment.outputs.comment-id }}
        issue-number: ${{ fromJSON(inputs.release-info).pr-number }}
        edit-mode: replace
        body: |
          #### ${{ inputs.comment-header }} - ${{ inputs.name }} - :label: Commit: ${{ github.sha }} - :gear: Workflow: [${{ github.run_id }}](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
          ```
          ${{ fromJSON(inputs.release-info).git-tag }}
          ${{ steps.meta.outputs.tags }}
          ${{ env.EXTRA_META }}
          ${{ steps.build-release.outputs.digest }}
          ```

    - name: error
      if: failure()
      shell: bash
      run: |
        echo "${SUMMARY}" >> "$GITHUB_STEP_SUMMARY"
      env:
        SUMMARY: |
          ---
          :x: An error occurred during execution! Check the workflow run logs for details!
