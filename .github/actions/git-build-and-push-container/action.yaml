name: 'Git Build and Push Container'
inputs:
  name:
    description: "Name of the release asset."
    required: true

  git-repo:
    description: "Url or name of the git repo to clone."
    required: true

  git-ref:
    description: "Version of the git ref to build."
    required: true

  version:
    description: "Version for the build push."
    required: true

  build-file:
    description: "Path to the container file."
    required: true

  build-context:
    description: "Path to the build root dir."
    default: '.'

  build-args:
    description: "KEY=VALUE build args as a multiline string."
    default: ''

  build-secrets:
    description: "KEY=VALUE build secrets as a multiline string."
    default: ''

  build-secret-envs:
    description: "KEY=VALUE build secrets from env vars as a multiline string."
    default: ''

  build-secret-files:
    description: "KEY=VALUE build secrets from files as a multiline string."
    default: ''

  registry:
    description: "URL of the container registry."
    required: true

  registry-user:
    description: "Username for the container registry."
    required: true

  registry-repo:
    description: "Repo within container registry project."
    required: true

  cosign-public-key:
    description: "Public key for cosigning images."
    required: false

  registry-token:
    description: "Authentication token for the container registry."
    required: true

  cosign-private-key:
    description: "Private key for cosigning containers."
    required: false

  cosign-password:
    description: "Private key password for cosigning containers."
    required: false

runs:
  using: "composite"
  steps:
    - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
      with:
        path: tmp/${{ inputs.git-repo }}/${{ inputs.git-ref }}
        repository: ${{ inputs.git-repo }}
        ref: ${{ inputs.git-ref }}

    - name: install cosign
      if: inputs.cosign-public-key != ''
      uses: sigstore/cosign-installer@3454372f43399081ed03b604cb2d021dabca52bb # v3.8.2

    - name: login to container registry for cosign
      if: inputs.cosign-public-key != ''
      uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3
      with:
        registry: ${{ inputs.registry }}
        username: ${{ inputs.registry-user }}
        password: ${{ inputs.registry-token }}

    - name: forward proxy settings
      shell: bash
      run: |
        echo "HTTP_PROXY=$HTTP_PROXY" >> $GITHUB_ENV
        echo "HTTPS_PROXY=$HTTPS_PROXY" >> $GITHUB_ENV
        echo "NO_PROXY=$NO_PROXY" >> $GITHUB_ENV

    - name: install buildx
      uses: docker/setup-buildx-action@b5ca514318bd6ebac0fb2aedd5d36ec1b5c232a2 # v3
      with:
        driver-opts: |
          env.http_proxy=${{ env.HTTP_PROXY }}
          env.https_proxy=${{ env.HTTPS_PROXY }}
          "env.no_proxy='${{ env.NO_PROXY }}'"
        buildkitd-config-inline: |
          [registry."docker.io"]
            mirrors = ["https://harbor.ukserp.ac.uk/proxycache"]
          [registry."quay.io"]
            mirrors = ["https://harbor.ukserp.ac.uk/quaycache"]
          [registry."ghcr.io"]
            mirrors = ["https://harbor.ukserp.ac.uk/ghcrcache"]
          [registry."mcr.microsoft.com"]
            mirrors = ["https://harbor.ukserp.ac.uk/microsoftcache"]

    - name: login to container registry
      uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3
      with:
        registry: ${{ inputs.registry }}
        username: ${{ inputs.registry-user }}
        password: ${{ inputs.registry-token }}

    - name: new release
      shell: bash
      run: |
        echo "${SUMMARY}" >> "$GITHUB_STEP_SUMMARY"
      env:
        SUMMARY: |
          #### ${{ inputs.comment-header }} - ${{ inputs.name }}-container - :label: Commit: ${{ github.sha }}
          :label: New version will be ${{ inputs.version }}  

    - name: release container metadata
      uses: docker/metadata-action@902fa8ec7d6ecbf8d84d538b9b233a880e428804 # v5
      id: meta
      with:
        images: |
          ${{ inputs.registry }}/${{ inputs.registry-repo }}
        tags: |
          type=raw,value=${{ inputs.version }}

    # TODO determine if workflow run commit ref has a pull request associated with it and cache-from that pr-<number> tag too
    - name: build release container
      uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6
      id: build-release
      with:
        file: tmp/${{ inputs.git-repo }}/${{ inputs.git-ref }}/${{ inputs.build-file }}
        context: tmp/${{ inputs.git-repo }}/${{ inputs.git-ref }}/${{ inputs.build-context }}
        build-args: |
          ${{ inputs.build-args }}
        secrets: |
          ${{ inputs.build-secrets }}
        secret-envs: |
          ${{ inputs.build-secret-envs }}
        secret-files: |
          ${{ inputs.build-secret-files }}
        tags: |
          ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        push: true
        github-token: ${{ github.token }}
        provenance: true
        cache-from: |
          type=registry,ref=${{ steps.meta.outputs.tags }}

    - name: build success
      if: steps.build-release.outcome == 'success'
      shell: bash
      run: |
        echo "${SUMMARY}" >> "$GITHUB_STEP_SUMMARY"
      env:
        SUMMARY: |
          ```
          ${{ steps.meta.outputs.tags }}
          ${{ steps.build-release.outputs.digest }}
          ```
          :hammer_and_wrench: Release Build Success  

    - name: build error
      if: failure() && steps.build-release.outcome == 'failure'
      shell: bash
      run: |
        echo "${SUMMARY}" >> "$GITHUB_STEP_SUMMARY"
      env:
        SUMMARY: ":x: Release Build Failure"

    - name: cosign image with key
      id: cosign-release
      if: inputs.cosign-public-key != '' && steps.build-release.outcome == 'success'
      env:
        COSIGN_PRIVATE_KEY: ${{ inputs.cosign-private-key }}
        COSIGN_PASSWORD: ${{ inputs.cosign-password }}
        COSIGN_PUBLIC_KEY: ${{ inputs.cosign-public-key }}
        TAGS: ${{ steps.meta.outputs.tags }}
        DIGEST: ${{ steps.build-release.outputs.digest }}
      shell: bash
      run: |
        cosign sign --yes --key env://COSIGN_PRIVATE_KEY "${TAGS}@${DIGEST}"
        cosign verify --key env://COSIGN_PUBLIC_KEY "${TAGS}@${DIGEST}"

    - name: cosign success
      if: steps.cosign-release.outcome == 'success'
      shell: bash
      run: |
        echo "${SUMMARY}" >> "$GITHUB_STEP_SUMMARY"
      env:
        SUMMARY: ":black_nib: Cosign Success  "

    - name: cosign error
      if: failure() && steps.cosign-release.outcome == 'failure'
      shell: bash
      run: |
        echo "${SUMMARY}" >> "$GITHUB_STEP_SUMMARY"
      env:
        SUMMARY: ":x: Cosign Failure"

    # TODO determine if workflow run commit ref has a pull request associated with it and comment the build

    - name: error
      if: failure()
      shell: bash
      run: |
        echo "${SUMMARY}" >> "$GITHUB_STEP_SUMMARY"
      env:
        SUMMARY: |
          ---
          :x: An error occurred during execution! Check the workflow run logs for details!
