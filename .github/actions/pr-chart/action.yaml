name: 'Build and Test a Chart'
inputs:
  job-name:
    description: "Job name to display on Slack messages."
    required: true
    type: string

  chart:
    description: "Path to the helm chart."
    required: true
    type: string

  comment-header:
    description: "Header line for the PR comment."
    default: ":anchor: Build PR Chart"
    type: string

  comment-enabled:
    description: "PR comment creation and update."
    default: "false"
    type: string

  test-command:
    description: "Command to test the chart named $CHART."
    default: ''
    type: string

  registry:
    description: "URL of the chart registry."
    required: true
    type: string

  registry-user:
    description: "Username for the chart registry."
    required: true
    type: string

  registry-project:
    description: "Project within chart registry."
    required: true
    type: string

  registry-repo:
    description: "Repo within chart registry project."
    required: true
    type: string

  slack-channel:
    description: "ID of the Slack channel to post updates to."
    required: true
    type: string

  cosign-public-key:
    description: "Public key for cosigning images."
    required: false
    type: string

  slack-token:
    description: "Authentication token for Slack."
    required: true

  registry-token:
    description: "Authentication token for the chart registry."
    required: true

  cosign-private-key:
    description: "Private key for cosigning charts."
    required: false

  cosign-password:
    description: "Private key password for cosigning charts."
    required: false

runs:
  using: "composite"
  steps:
    - name: install cosign
      if: inputs.cosign-public-key != ''
      uses: sigstore/cosign-installer@v3.1.2

    - name: login to container registry for cosign
      if: inputs.cosign-public-key != ''
      uses: docker/login-action@v3
      with:
        registry: ${{ inputs.registry }}
        username: ${{ inputs.registry-user }}
        password: ${{ inputs.registry-token }}

    - name: install helm
      uses: azure/setup-helm@v4.0.0
      with:
        version: 'v3.9.0'
        token: ${{ github.token }}

    - name: login to chart registry
      shell: bash
      run: |
        helm registry login \
          --username '${{ inputs.registry-user }}' \
          --password '${{ inputs.registry-token }}' \
          ${{ inputs.registry }}
        
    - name: create tags
      shell: bash
      run: |
        GITHUB_SHORT_SHA=`echo ${{ github.event.pull_request.head.sha }} | cut -c1-7`
        echo "GITHUB_SHORT_SHA=$GITHUB_SHORT_SHA" >> $GITHUB_ENV
        
        CHART_PROJECT="${{ inputs.registry }}/${{ inputs.registry-project }}/chart"
        echo "CHART_PROJECT=$CHART_PROJECT" >> $GITHUB_ENV
        echo "CHART_REPO=$CHART_PROJECT/${{ inputs.registry-repo }}" >> $GITHUB_ENV
        
        echo "PR_TAG=0.0.0-pr.${{ github.event.pull_request.number }}" >> $GITHUB_ENV  
        echo "PR_COMMIT_TAG=0.0.0-pr.${{ github.event.pull_request.number }}+${GITHUB_SHORT_SHA}" >> $GITHUB_ENV

    - name: build chart
      id: helm
      shell: bash
      run: |
        helm dependency update ${{ inputs.chart }}
        helm package ${{ inputs.chart }} --version ${{ env.PR_TAG }}
        helm push ${{ inputs.registry-repo }}-${{ env.PR_TAG }}.tgz oci://${{ env.CHART_PROJECT }}

    - name: build success
      if: steps.helm.outcome == 'success'
      shell: bash
      run: |
        echo "${SUMMARY}" >> "$GITHUB_STEP_SUMMARY"
      env:
        SUMMARY: |
          #### ${{ inputs.comment-header }} - ${{ inputs.job-name }} - :label: Commit: ${{ github.sha }}
          ```
          ${{ env.CHART_REPO }}:${{ env.PR_TAG }}
          ```
          :hammer_and_wrench: Build Success  

    - name: build failure
      if: failure() && steps.helm.outcome == 'failure'
      shell: bash
      run: |
        echo "${SUMMARY}" >> "$GITHUB_STEP_SUMMARY"
      env:
        SUMMARY: ":x: Build Failure"

    - name: find pr comment
      uses: peter-evans/find-comment@v3
      if: inputs.comment-enabled == 'true'
      id: find-pr-comment
      with:
        issue-number: ${{ github.event.pull_request.number }}
        body-includes: ${{ inputs.comment-header }} - ${{ inputs.job-name }}
        comment-author: "github-actions[bot]"

    - name: create or update pr comment on build success
      id: build-pr-comment
      if: inputs.comment-enabled == 'true'
      uses: peter-evans/create-or-update-comment@v4
      with:
        comment-id: ${{ steps.find-pr-comment.outputs.comment-id }}
        issue-number: ${{ github.event.pull_request.number }}
        edit-mode: replace
        body: |
          #### ${{ inputs.comment-header }} - ${{ inputs.job-name }} - :label: Commit: ${{ github.event.pull_request.head.sha }} - :gear: Workflow: [${{ github.run_id }}](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
          ```
          ${{ env.CHART_REPO }}:${{ env.PR_TAG }}
          ``` 

    - name: cosign chart
      id: cosign
      if: inputs.cosign-public-key != '' && steps.helm.outcome == 'success'
      env:
        COSIGN_PRIVATE_KEY: ${{ inputs.cosign-private-key }}
        COSIGN_PASSWORD: ${{ inputs.cosign-password }}
        COSIGN_PUBLIC_KEY: ${{ inputs.cosign-public-key }}
      shell: bash
      run: |
        cosign sign --yes --key env://COSIGN_PRIVATE_KEY "${CHART_REPO}:${PR_TAG}"
        cosign verify --key env://COSIGN_PUBLIC_KEY "${CHART_REPO}:${PR_TAG}"
        cosign verify --key env://COSIGN_PUBLIC_KEY "${CHART_REPO}:${PR_TAG//\+/_}"

    - name: cosign success
      if: steps.cosign.outcome == 'success'
      shell: bash
      run: |
        echo "${SUMMARY}" >> "$GITHUB_STEP_SUMMARY"
      env:
        SUMMARY: ":black_nib: Cosign Success  "

    - name: cosign error
      if: failure() && steps.cosign.outcome == 'failure'
      shell: bash
      run: |
        echo "${SUMMARY}" >> "$GITHUB_STEP_SUMMARY"
      env:
        SUMMARY: ":x: Cosign Failure"

    - name: test
      id: test
      if: inputs.test-command != '' && steps.helm.outcome == 'success' && steps.cosign.outcome != 'failure'
      shell: bash
      run: |
        set -x
        CHART="${{ inputs.registry-repo }}-${{ env.PRs_TAG }}.tgz"
        ${{ inputs.command }}

    - name: test success
      if: steps.test.outcome == 'success'
      shell: bash
      run: |
        echo "${SUMMARY}" >> "$GITHUB_STEP_SUMMARY"
      env:
        SUMMARY: ":eyes: Test Success  "

    - name: test error
      if: failure() && steps.test.outcome == 'failure'
      shell: bash
      run: |
        echo "${SUMMARY}" >> "$GITHUB_STEP_SUMMARY"
      env:
        SUMMARY: ":x: Test Failure"
