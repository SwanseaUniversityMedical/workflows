name: 'Release Chart'
inputs:
  name:
    description: "Name of the release asset."
    required: true

  major-label:
    description: "Label text for major releases."
    required: true

  minor-label:
    description: "Label text for minor releases."
    required: true

  patch-label:
    description: "Label text for patch releases."
    required: true

  comment-header:
    description: "Header line for the Release summary."
    default: ":rocket: :anchor: Build Release Chart"

  comment-enabled:
    description: "Release comment creation and update."
    default: "true"

  chart:
    description: "Path to the helm chart."
    required: true

  test-command:
    description: "Command to test the chart named $CHART."
    default: ''

  registry:
    description: "URL of the chart registry."
    required: true

  registry-user:
    description: "Username for the chart registry."
    required: true

  registry-project:
    description: "Project within chart registry."
    required: true

  registry-repo:
    description: "Repo within chart registry project."
    required: true

  release-tag-format:
    description: "Semantic-release Github release tag format."
    default: '${version}'

  cosign-public-key:
    description: "Public key for cosigning images."
    required: false

  registry-token:
    description: "Authentication token for the chart registry."
    required: true

  cosign-private-key:
    description: "Private key for cosigning charts."
    required: false

  cosign-password:
    description: "Private key password for cosigning charts."
    required: false

runs:
  using: "composite"
  steps:
    - name: determine release
      id: semantic
      uses: SwanseaUniversityMedical/workflows/.github/actions/determine-bump@v1.0.1-determine-bump-action
      with:
        release-tag-format: ${{ inputs.release-tag-format }}
        major-label: ${{ inputs.major-label }}
        minor-label: ${{ inputs.minor-label }}
        patch-label: ${{ inputs.patch-label }}

    - name: install cosign
      if: steps.semantic.outputs.new-release-published == 'true' && inputs.cosign-public-key != ''
      uses: sigstore/cosign-installer@v3.8.1

    - name: login to container registry for cosign
      if: steps.semantic.outputs.new-release-published == 'true' && inputs.cosign-public-key != ''
      uses: docker/login-action@v3
      with:
        registry: ${{ inputs.registry }}
        username: ${{ inputs.registry-user }}
        password: ${{ inputs.registry-token }}

    - name: install helm
      if: steps.semantic.outputs.new-release-published == 'true'
      uses: azure/setup-helm@v4.3.0
      with:
        version: 'v3.15.1'

    - name: login to chart registry
      if: steps.semantic.outputs.new-release-published == 'true'
      shell: bash
      run: |
        helm registry login \
          --username '${{ inputs.registry-user }}' \
          --password '${{ inputs.registry-token }}' \
          ${{ inputs.registry }}

    - name: create chart repo url
      if: steps.semantic.outputs.new-release-published == 'true'
      shell: bash
      run: |
        CHART_PROJECT="${{ inputs.registry }}/${{ inputs.registry-project }}/chart"
        echo "CHART_PROJECT=$CHART_PROJECT" >> $GITHUB_ENV
        echo "CHART_REPO=$CHART_PROJECT/${{ inputs.registry-repo }}" >> $GITHUB_ENV

    - name: new release
      if: steps.semantic.outputs.new-release-published == 'true'
      shell: bash
      run: |
        echo "${SUMMARY}" >> "$GITHUB_STEP_SUMMARY"
      env:
        SUMMARY: |
          #### ${{ inputs.comment-header }} - ${{ inputs.name }} - :label: Commit: ${{ github.sha }}
          :label: New version will be ${{ steps.semantic.outputs.release-version }}  

    - name: skipped release
      if: steps.semantic.outputs.new-release-published != 'true'
      shell: bash
      run: |
        echo "${SUMMARY}" >> "$GITHUB_STEP_SUMMARY"
      env:
        SUMMARY: |
          #### ${{ inputs.comment-header }} - ${{ inputs.name }} - :label: Commit: ${{ github.sha }}  
          :desert_island: Skipping release!

    - name: create tags
      if: steps.semantic.outputs.new-release-published == 'true'
      shell: bash
      run: |
        echo "RELEASE_TAG=${{ steps.semantic.outputs.release-version }}" >> $GITHUB_ENV
        echo "RC_TAG=${{ steps.semantic.outputs.release-version }}-rc" >> $GITHUB_ENV

    - name: build release candidate chart
      id: helm-rc
      if: steps.semantic.outputs.new-release-published == 'true'
      shell: bash
      run: |
        helm dependency update ${{ inputs.chart }}
        helm package ${{ inputs.chart }} --version ${{ env.RC_TAG }}
        helm push ${{ inputs.registry-repo }}-${{ env.RC_TAG }}.tgz oci://${{ env.CHART_PROJECT }}

    - name: build success
      if: steps.helm-rc.outcome == 'success'
      shell: bash
      run: |
        echo "${SUMMARY}" >> "$GITHUB_STEP_SUMMARY"
      env:
        SUMMARY: |
          ```
          ${{ env.CHART_REPO }}:${{ env.RC_TAG }}
          ```
          :hammer_and_wrench: Build Success  

    - name: build failure
      if: failure() && steps.helm-rc.outcome == 'failure'
      shell: bash
      run: |
        echo "${SUMMARY}" >> "$GITHUB_STEP_SUMMARY"
      env:
        SUMMARY: ":x: Build Failure"

    - name: cosign release candidate
      id: cosign-rc
      if: inputs.cosign-public-key != '' && steps.helm-rc.outcome == 'success'
      env:
        COSIGN_PRIVATE_KEY: ${{ inputs.cosign-private-key }}
        COSIGN_PASSWORD: ${{ inputs.cosign-password }}
        COSIGN_PUBLIC_KEY: ${{ inputs.cosign-public-key }}
      shell: bash
      run: |
        cosign sign --yes --key env://COSIGN_PRIVATE_KEY "${CHART_REPO}:${RC_TAG}"
        cosign verify --key env://COSIGN_PUBLIC_KEY "${CHART_REPO}:${RC_TAG}"

    - name: cosign success
      if: steps.cosign-rc.outcome == 'success'
      shell: bash
      run: |
        echo "${SUMMARY}" >> "$GITHUB_STEP_SUMMARY"
      env:
        SUMMARY: ":black_nib: Cosign Success  "

    - name: cosign error
      if: failure() && steps.cosign-rc.outcome == 'failure'
      shell: bash
      run: |
        echo "${SUMMARY}" >> "$GITHUB_STEP_SUMMARY"
      env:
        SUMMARY: ":x: Cosign Failure"

    - name: test release candidate
      id: test
      if: inputs.test-command != '' && steps.helm-rc.outcome == 'success' && steps.cosign-rc.outcome != 'failure'
      shell: bash
      run: |
        set -x
        CHART="${{ inputs.registry-repo }}-${{ env.RC_TAG}}.tgz"
        ${{ inputs.test-command }}

    - name: test success
      if: steps.test.outcome == 'success'
      shell: bash
      run: |
        echo "${SUMMARY}" >> "$GITHUB_STEP_SUMMARY"
      env:
        SUMMARY: ":eyes: Test Success  "

    - name: test error
      if: failure() && steps.test.outcome == 'failure'
      shell: bash
      run: |
        echo "${SUMMARY}" >> "$GITHUB_STEP_SUMMARY"
      env:
        SUMMARY: ":x: Test Failure"

    - name: build release chart
      id: helm-release
      if: steps.helm-rc.outcome == 'success' && steps.cosign-rc.outcome != 'failure' && steps.test.outcome != 'failure'
      shell: bash
      run: |
        helm package ${{ inputs.chart }} --version ${{ env.RELEASE_TAG }}
        helm push ${{ inputs.registry-repo }}-${{ env.RELEASE_TAG }}.tgz oci://${{ env.CHART_PROJECT }}

    - name: build success
      if: steps.helm-release.outcome == 'success'
      shell: bash
      run: |
        echo "${SUMMARY}" >> "$GITHUB_STEP_SUMMARY"
      env:
        SUMMARY: |
          ```
          ${{ env.CHART_REPO }}:${{ env.RELEASE_TAG }}
          ```
          :hammer_and_wrench: Build Success  

    - name: build failure
      if: failure() && steps.helm-release.outcome == 'failure'
      shell: bash
      run: |
        echo "${SUMMARY}" >> "$GITHUB_STEP_SUMMARY"
      env:
        SUMMARY: ":x: Build Failure"

    - name: cosign release
      id: cosign-release
      if: inputs.cosign-public-key != '' && steps.helm-release.outcome == 'success'
      env:
        COSIGN_PRIVATE_KEY: ${{ inputs.cosign-private-key }}
        COSIGN_PASSWORD: ${{ inputs.cosign-password }}
        COSIGN_PUBLIC_KEY: ${{ inputs.cosign-public-key }}
      shell: bash
      run: |
        cosign sign --yes --key env://COSIGN_PRIVATE_KEY "${CHART_REPO}:${RELEASE_TAG}"
        cosign verify --key env://COSIGN_PUBLIC_KEY "${CHART_REPO}:${RELEASE_TAG}"

    - name: cosign success
      if: steps.cosign-release.outcome == 'success'
      shell: bash
      run: |
        echo "${SUMMARY}" >> "$GITHUB_STEP_SUMMARY"
      env:
        SUMMARY: ":black_nib: Cosign Success  "

    - name: cosign error
      if: failure() && steps.cosign-release.outcome == 'failure'
      shell: bash
      run: |
        echo "${SUMMARY}" >> "$GITHUB_STEP_SUMMARY"
      env:
        SUMMARY: ":x: Cosign Failure"

    - name: github release
      id: release
      if: steps.helm-release.outcome == 'success' && steps.cosign-release.outcome != 'failure'
      uses: actions/github-script@v7
      with:
        retries: 3
        github-token: ${{ github.token }}
        script: |
          github.rest.repos.createRelease({
            owner: "${{ github.repository_owner }}",
            repo: "${{ github.event.repository.name }}",
            tag_name: "${{ steps.semantic.outputs.git-tag }}",
            target_commitish: "${{ github.sha }}",
            body: "",
            name: "${{ steps.semantic.outputs.git-tag }}"
          });

    - name: release success
      if: steps.release.outcome == 'success'
      shell: bash
      run: |
        echo "${SUMMARY}" >> "$GITHUB_STEP_SUMMARY"
      env:
        SUMMARY: |
          ```
          ${{ steps.semantic.outputs.git-tag }}
          ```
          :hammer_and_wrench: Github Release Success  

    - name: release error
      if: failure() && steps.release.outcome == 'failure'
      shell: bash
      run: |
        echo "${SUMMARY}" >> "$GITHUB_STEP_SUMMARY"
      env:
        SUMMARY: ":x: Github Release Failure"

    - name: find pr comment
      uses: peter-evans/find-comment@v3
      if: inputs.comment-enabled == 'true' && steps.semantic.outputs.new-release-published == 'true'
      id: find-pr-comment
      with:
        issue-number: ${{ steps.semantic.outputs.pr-number }}
        body-includes: ${{ inputs.comment-header }} - ${{ inputs.name }}
        comment-author: "github-actions[bot]"

    - name: comment on release success
      id: release-pr-comment
      if: inputs.comment-enabled == 'true' && steps.semantic.outputs.new-release-published == 'true'
      uses: peter-evans/create-or-update-comment@v4
      with:
        comment-id: ${{ steps.find-pr-comment.outputs.comment-id }}
        issue-number: ${{ steps.semantic.outputs.pr-number }}
        edit-mode: replace
        body: |
          #### ${{ inputs.comment-header }} - ${{ inputs.name }} - :label: Commit: ${{ github.sha }} - :gear: Workflow: [${{ github.run_id }}](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
          ```
          ${{ steps.semantic.outputs.git-tag }}
          ${{ env.CHART_REPO }}:${{ env.RELEASE_TAG }}
          ```

    - name: error
      if: failure()
      shell: bash
      run: |
        echo "${SUMMARY}" >> "$GITHUB_STEP_SUMMARY"
      env:
        SUMMARY: |
          ---
          :x: An error occurred during execution! Check the workflow run logs for details!
