name: 'Build, Test and Release a Chart'
inputs:
  job-name:
    description: "Job name to display on Slack messages."
    required: true
    type: string

  chart:
    description: "Path to the helm chart."
    required: true
    type: string

  comment-header:
    description: "Header line for the Release summary."
    default: ":anchor: Build Release Chart"
    type: string

  test-command:
    description: "Command to test the chart named $CHART."
    default: ''
    type: string

  registry:
    description: "URL of the chart registry."
    required: true
    type: string

  registry-user:
    description: "Username for the chart registry."
    required: true
    type: string

  registry-project:
    description: "Project within chart registry."
    required: true
    type: string

  registry-repo:
    description: "Repo within chart registry project."
    required: true
    type: string

  release-tag-format:
    description: "Semantic-release Github release tag format."
    default: '${version}'
    type: string

  cosign-public-key:
    description: "Public key for cosigning images."
    required: false
    type: string

  registry-token:
    description: "Authentication token for the chart registry."
    required: true

  cosign-private-key:
    description: "Private key for cosigning charts."
    required: false

  cosign-password:
    description: "Private key password for cosigning charts."
    required: false

runs:
  using: "composite"
  steps:
    - name: determine release
      id: determine-release
      uses: actions/github-script@v7.0.1
      with:
        script: |
          var inputs = ${{ toJSON(inputs) }};
          var asset = inputs['job-name'].trim();
          
          var major = `major: ${asset}`;
          core.setOutput("major", major);
          
          var minor = `minor: ${asset}`;
          core.setOutput("minor", minor);
          
          var patch = `patch: ${asset}`;
          core.setOutput("patch", patch);
          
          try {
            await github.rest.issues.createLabel({
              owner: context.repo.owner,
              repo: context.repo.repo,
              name: major,
              color: "B60205"
            });
          } catch (error) {
            console.log(error);
          }
          
          try {
            await github.rest.issues.createLabel({
              owner: context.repo.owner,
              repo: context.repo.repo,
              name: minor,
              color: "8BD931"
            });
          } catch (error) {
            console.log(error);
          }
          
          try {
            await github.rest.issues.createLabel({
              owner: context.repo.owner,
              repo: context.repo.repo,
              name: patch,
              color: "FBCA04"
            });
          } catch (error) {
            console.log(error);
          }

          var result = await github.rest.repos.listPullRequestsAssociatedWithCommit({
            owner: context.repo.owner,
            repo: context.repo.repo,  
            commit_sha: context.sha,
          });
          
          if (result.data.length > 0) {
            if (result.data.length > 1) {
              core.warning("Found multiple pull requests associated with the current commit!");
            }
            
            for (let i = 0; i < result.data.length; i++) {
              var pr = result.data[i];
              //core.debug(JSON.stringify(pr));
            
              if ((pr.base.ref === context.ref) && (pr.state === 'closed') && (pr.merge_commit_sha === context.sha)) {
                core.info("Found pull request " + pr.number + " which created the current commit " + context.sha);
                core.setOutput("number", pr.number);
          
                var labels = await github.rest.issues.listLabelsOnIssue({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: pr.number,
                });
          
                //core.debug(JSON.stringify(labels));
                core.setOutput("labels", JSON.stringify(labels));
          
                if (labels.includes(major)) {
                  core.info("next release will be major");
                  core.setOutput("release", "major");
                }
                else if (labels.includes(minor)) {
                  core.info("next release will be minor");
                  core.setOutput("release", "minor");
                }
                else if (labels.includes(patch)) {
                  core.info("next release will be patch");
                  core.setOutput("release", "patch");
                }
                else {
                  core.info("next release will be skipped");
                  core.setOutput("release", "");
                }
          
                break;
              } 
            }
          }
          
    - name: semantic release
      uses: docker://harbor.ukserp.ac.uk/github-workflows/semantic-release-action:v3
      id: semantic
      env:
        GITHUB_TOKEN: ${{ github.token }}
      with:
        dry-run: true
        branches: ${{ github.ref }}
        tag-format: ${{ inputs.release-tag-format }}
        plugins: |-
          [
            ['@semantic-release/exec', {
              "analyzeCommitsCmd": "printf \"%s\" \"${{ steps.determine-release.outputs.release }}\"",
            }]
          ]

    - name: install cosign
      if: steps.semantic.outputs.new-release-published == 'true' && inputs.cosign-public-key != ''
      uses: sigstore/cosign-installer@v3.1.2

    - name: login to container registry for cosign
      if: steps.semantic.outputs.new-release-published == 'true' && inputs.cosign-public-key != ''
      uses: docker/login-action@v3
      with:
        registry: ${{ inputs.registry }}
        username: ${{ inputs.registry-user }}
        password: ${{ inputs.registry-token }}

    - name: install helm
      if: steps.semantic.outputs.new-release-published == 'true'
      uses: azure/setup-helm@v4.0.0
      with:
        version: 'v3.9.0'
        token: ${{ github.token }}

    - name: login to chart registry
      if: steps.semantic.outputs.new-release-published == 'true'
      shell: bash
      run: |
        helm registry login \
          --username '${{ inputs.registry-user }}' \
          --password '${{ inputs.registry-token }}' \
          ${{ inputs.registry }}

    - name: create chart repo url
      if: steps.semantic.outputs.new-release-published == 'true'
      shell: bash
      run: |
        CHART_PROJECT="${{ inputs.registry }}/${{ inputs.registry-project }}/chart"
        echo "CHART_PROJECT=$CHART_PROJECT" >> $GITHUB_ENV
        echo "CHART_REPO=$CHART_PROJECT/${{ inputs.registry-repo }}" >> $GITHUB_ENV

    - name: new release
      if: steps.semantic.outputs.new-release-published == 'true'
      shell: bash
      run: |
        echo "${SUMMARY}" >> "$GITHUB_STEP_SUMMARY"
      env:
        SUMMARY: |
          #### ${{ inputs.comment-header }} - ${{ inputs.job-name }} - :label: Commit: ${{ github.sha }}
          :label: New version will be ${{ steps.semantic.outputs.release-version }}  

    - name: skipped release
      if: steps.semantic.outputs.new-release-published != 'true'
      shell: bash
      run: |
        echo "${SUMMARY}" >> "$GITHUB_STEP_SUMMARY"
      env:
        SUMMARY: |
          #### ${{ inputs.comment-header }} - ${{ inputs.job-name }} - :label: Commit: ${{ github.sha }}  
          :desert_island: Skipping release!

    - name: create tags
      if: steps.semantic.outputs.new-release-published == 'true'
      shell: bash
      run: |
        echo "RELEASE_TAG=${{ steps.semantic.outputs.release-version }}" >> $GITHUB_ENV
        echo "RC_TAG=${{ steps.semantic.outputs.release-version }}-rc" >> $GITHUB_ENV

    - name: build release candidate chart
      id: helm-rc
      if: steps.semantic.outputs.new-release-published == 'true'
      shell: bash
      run: |
        helm dependency update ${{ inputs.chart }}
        helm package ${{ inputs.chart }} --version ${{ env.RC_TAG }}
        helm push ${{ inputs.registry-repo }}-${{ env.RC_TAG }}.tgz oci://${{ env.CHART_PROJECT }}

    - name: build success
      if: steps.helm-rc.outcome == 'success'
      shell: bash
      run: |
        echo "${SUMMARY}" >> "$GITHUB_STEP_SUMMARY"
      env:
        SUMMARY: |
          ```
          ${{ env.CHART_REPO }}:${{ env.RC_TAG }}
          ```
          :hammer_and_wrench: Build Success  

    - name: build failure
      if: failure() && steps.helm-rc.outcome == 'failure'
      shell: bash
      run: |
        echo "${SUMMARY}" >> "$GITHUB_STEP_SUMMARY"
      env:
        SUMMARY: ":x: Build Failure"

    - name: cosign release candidate
      id: cosign-rc
      if: inputs.cosign-public-key != '' && steps.helm-rc.outcome == 'success'
      env:
        COSIGN_PRIVATE_KEY: ${{ inputs.cosign-private-key }}
        COSIGN_PASSWORD: ${{ inputs.cosign-password }}
        COSIGN_PUBLIC_KEY: ${{ inputs.cosign-public-key }}
      shell: bash
      run: |
        cosign sign --yes --key env://COSIGN_PRIVATE_KEY "${CHART_REPO}:${RC_TAG}"
        cosign verify --key env://COSIGN_PUBLIC_KEY "${CHART_REPO}:${RC_TAG}"

    - name: cosign success
      if: steps.cosign-rc.outcome == 'success'
      shell: bash
      run: |
        echo "${SUMMARY}" >> "$GITHUB_STEP_SUMMARY"
      env:
        SUMMARY: ":black_nib: Cosign Success  "

    - name: cosign error
      if: failure() && steps.cosign-rc.outcome == 'failure'
      shell: bash
      run: |
        echo "${SUMMARY}" >> "$GITHUB_STEP_SUMMARY"
      env:
        SUMMARY: ":x: Cosign Failure"

    - name: test release candidate
      id: test
      if: inputs.test-command != '' && steps.helm-rc.outcome == 'success' && steps.cosign-rc.outcome != 'failure'
      shell: bash
      run: |
        set -x
        CHART="${{ inputs.registry-repo }}-${{ env.RC_TAG}}.tgz"
        ${{ inputs.test-command }}

    - name: test success
      if: steps.test.outcome == 'success'
      shell: bash
      run: |
        echo "${SUMMARY}" >> "$GITHUB_STEP_SUMMARY"
      env:
        SUMMARY: ":eyes: Test Success  "

    - name: test error
      if: failure() && steps.test.outcome == 'failure'
      shell: bash
      run: |
        echo "${SUMMARY}" >> "$GITHUB_STEP_SUMMARY"
      env:
        SUMMARY: ":x: Test Failure"

    - name: build release chart
      id: helm-release
      if: steps.helm-rc.outcome == 'success' && steps.cosign-rc.outcome != 'failure' && steps.test.outcome != 'failure'
      shell: bash
      run: |
        helm package ${{ inputs.chart }} --version ${{ env.RELEASE_TAG }}
        helm push ${{ inputs.registry-repo }}-${{ env.RELEASE_TAG }}.tgz oci://${{ env.CHART_PROJECT }}

    - name: build success
      if: steps.helm-release.outcome == 'success'
      shell: bash
      run: |
        echo "${SUMMARY}" >> "$GITHUB_STEP_SUMMARY"
      env:
        SUMMARY: |
          ```
          ${{ env.CHART_REPO }}:${{ env.RELEASE_TAG }}
          ```
          :hammer_and_wrench: Build Success  

    - name: build failure
      if: failure() && steps.helm-release.outcome == 'failure'
      shell: bash
      run: |
        echo "${SUMMARY}" >> "$GITHUB_STEP_SUMMARY"
      env:
        SUMMARY: ":x: Build Failure"

    - name: cosign release
      id: cosign-release
      if: inputs.cosign-public-key != '' && steps.helm-release.outcome == 'success'
      env:
        COSIGN_PRIVATE_KEY: ${{ inputs.cosign-private-key }}
        COSIGN_PASSWORD: ${{ inputs.cosign-password }}
        COSIGN_PUBLIC_KEY: ${{ inputs.cosign-public-key }}
      shell: bash
      run: |
        cosign sign --yes --key env://COSIGN_PRIVATE_KEY "${CHART_REPO}:${RELEASE_TAG}"
        cosign verify --key env://COSIGN_PUBLIC_KEY "${CHART_REPO}:${RELEASE_TAG}"

    - name: cosign success
      if: steps.cosign-release.outcome == 'success'
      shell: bash
      run: |
        echo "${SUMMARY}" >> "$GITHUB_STEP_SUMMARY"
      env:
        SUMMARY: ":black_nib: Cosign Success  "

    - name: cosign error
      if: failure() && steps.cosign-release.outcome == 'failure'
      shell: bash
      run: |
        echo "${SUMMARY}" >> "$GITHUB_STEP_SUMMARY"
      env:
        SUMMARY: ":x: Cosign Failure"

    - name: github release
      id: release
      if: steps.helm-release.outcome == 'success' && steps.cosign-release.outcome != 'failure'
      uses: actions/github-script@v7
      with:
        retries: 3
        github-token: ${{ github.token }}
        script: |
          github.rest.repos.createRelease({
            owner: "${{ github.repository_owner }}",
            repo: "${{ github.event.repository.name }}",
            tag_name: "${{ steps.semantic.outputs.git-tag }}",
            target_commitish: "${{ github.sha }}",
            body: "",
            name: "${{ steps.semantic.outputs.git-tag }}"
          });

    - name: error
      if: failure()
      shell: bash
      run: |
        echo "${SUMMARY}" >> "$GITHUB_STEP_SUMMARY"
      env:
        SUMMARY: |
          ---
          :x: An error occurred during execution! Check the workflow run logs for details!
