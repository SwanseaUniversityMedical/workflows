name: 'Build, Test and Release Container'
inputs:
  job-name:
    description: "Job name to display on Slack messages."
    required: true
    type: string

  build-file:
    description: "Path to the container file."
    required: true
    type: string

  build-context:
    description: "Path to the build root dir."
    default: '.'
    type: string

  test-flags:
    description: "Arguments passed to docker run."
    default: ''
    type: string

  test-args:
    description: "Arguments passed to the container."
    default: ''
    type: string

  registry:
    description: "URL of the container registry."
    required: true
    type: string

  registry-user:
    description: "Username for the container registry."
    required: true
    type: string

  registry-repo:
    description: "Repo within container registry project."
    required: true
    type: string

  registry-tag-prefix:
    description: "Prefix to use when tagging container"
    default: ''
    type: string

  registry-tag-suffix:
    description: "Suffix to use when tagging container"
    default: ''
    type: string

  release-rules:
    description: "JSON list of rule dicts for what commit types trigger releases."
    default: |
      [
        {"type": "major", "release": "major"},
        {"type": "minor", "release": "minor"},
        {"type": "patch", "release": "patch"},
        {"type": "no-release", "release": false},
      
        {"type": "chore", "release": "patch"},
        {"type": "refactor", "release": "patch"},
        {"type": "style", "release": "patch"},
      
        {"type": "docs", "release": false},
        {"type": "test", "release": false},
        {"type": "ci", "release": false},
      
        {"type": "feat", "release": "minor"},
      
        {"type": "revert", "release": "patch"},
        {"type": "perf", "release": "patch"},
        {"type": "fix", "release": "patch"},
        {"type": "build", "release": "patch"},
      ]
    type: string

  release-branches:
    description: "JSON list of regex branch filters."
    default: |
      [
        '+([0-9])?(.{+([0-9]),x}).x',
        'main'
      ]
    type: string

  release-tag-format:
    description: "Semantic-release Github release tag format."
    default: '${version}'
    type: string

  release-app-id:
    description: "Github App ID for making a release merge commit."
    required: true
    type: string

  release-app-client-id:
    description: "Github App Client ID for making a release merge commit."
    required: true
    type: string

  release-app-user:
    description: "Github App User for making a release merge commit."
    required: true
    type: string

  release-app-private-key:
    description: "Github App private key for making a release merge commit"
    required: true
    type: string

  slack-channel:
    description: "ID of the Slack channel to post updates to."
    required: true
    type: string

  cosign-public-key:
    description: "Public key for cosigning images."
    required: false
    type: string

  slack-token:
    description: "Authentication token for Slack."
    required: true

  registry-token:
    description: "Authentication token for the container registry."
    required: true

  cosign-private-key:
    description: "Private key for cosigning images."
    required: false

  cosign-password:
    description: "Private key password for cosigning images."
    required: false

runs:
  using: "composite"
  steps:
    - name: install gh cli
      uses: ksivamuthu/actions-setup-gh-cli@v2
      with:
        version: 2.46.0

    - name: generate release merge token
      id: generate-release-token
      uses: tibdex/github-app-token@v2.1.0
      with:
        app_id: ${{ inputs.release-app-id }}
        private_key: ${{ inputs.release-app-private-key }}

    - name: determine trunk branch
      shell: bash
      run: |
        echo "TRUNK=main" >> $GITHUB_ENV

    - name: merge release commit into trunk branch
      env:
        TITLE: "chore(${{ inputs.job-name }}): merge release commit ${{ github.sha }}"
        BODY: "Merge release commit ${{ github.sha }} on branch ${{ github.ref }} into ${{ env.TRUNK }} using a merge commit."
        GH_TOKEN: ${{ steps.generate-release-token.outputs.token }}
      shell: bash
      run: |
        set -x
        
        pr=$(gh pr create --base="${TRUNK}" --title="${TITLE}" --body="${BODY}")
        gh pr merge --auto --merge --subject="${TITLE}" --body="${BODY}" "${pr}"
        
    - name: install cosign
      if: inputs.cosign-public-key != ''
      uses: sigstore/cosign-installer@v3.1.2

    - name: forward proxy settings
      shell: bash
      run: |
        echo "HTTP_PROXY=$HTTP_PROXY" >> $GITHUB_ENV
        echo "HTTPS_PROXY=$HTTPS_PROXY" >> $GITHUB_ENV
        echo "NO_PROXY=$NO_PROXY" >> $GITHUB_ENV

    - name: install buildx
      uses: docker/setup-buildx-action@v3
      with:
        driver-opts: |
          env.http_proxy=${{ env.HTTP_PROXY }}
          env.https_proxy=${{ env.HTTPS_PROXY }}
          "env.no_proxy='${{ env.NO_PROXY }}'"
        config-inline: |
          [registry."docker.io"]
            mirrors = ["https://harbor.ukserp.ac.uk/proxycache"]
          [registry."quay.io"]
            mirrors = ["https://harbor.ukserp.ac.uk/quaycache"]
          [registry."ghcr.io"]
            mirrors = ["https://harbor.ukserp.ac.uk/ghcrcache"]
          [registry."mcr.microsoft.com"]
            mirrors = ["https://harbor.ukserp.ac.uk/microsoftcache"]

    - name: login to container registry
      uses: docker/login-action@v3
      with:
        registry: ${{ inputs.registry }}
        username: ${{ inputs.registry-user }}
        password: ${{ inputs.registry-token }}
# remainder
    - name: determine release
      uses: docker://harbor.ukserp.ac.uk/github-workflows/semantic-release-action:v3
      id: semantic
      env:
        GITHUB_TOKEN: ${{ github.token }}
      with:
        dry-run: true
        branches: ${{ inputs.release-branches }}
        tag-format: ${{ inputs.release-tag-format }}
        plugins: |-
          [
            ['@semantic-release/commit-analyzer', {
              "releaseRules": ${{ inputs.release-rules }},
            }], 
            '@semantic-release/release-notes-generator',
            ['@semantic-release/github', {
              "successComment": false,
              "failTitle": false
            }]
          ]

    - name: annotate the ci run with release version output
      if: steps.semantic.outputs.new-release-published == 'true'
      shell: bash
      run: >-
        echo "::notice title=Job: ${{ github.job }} / ${{ inputs.job-name }}::%0A
        Next release will be version ${{ steps.semantic.outputs.release-version }}"

    - name: cache container metadata
      if: steps.semantic.outputs.new-release-published == 'true'
      uses: docker/metadata-action@v5
      id: branch-recent-meta
      with:
        images: |
          ${{ inputs.registry }}/${{ inputs.registry-repo }}
        tags: |
          type=ref,event=branch,prefix=rc-

    - name: pr cache container metadata
      if: steps.semantic.outputs.new-release-published == 'true'
      uses: docker/metadata-action@v5
      id: pr-recent-meta
      with:
        images: |
          ${{ inputs.registry }}/${{ inputs.registry-repo }}
        tags: |
          type=raw,value=pr-recent

    - name: rc cache container metadata
      if: steps.semantic.outputs.new-release-published == 'true'
      uses: docker/metadata-action@v5
      id: rc-recent-meta
      with:
        images: |
          ${{ inputs.registry }}/${{ inputs.registry-repo }}
        tags: |
          type=raw,value=rc-recent

    - name: rc container metadata
      if: steps.semantic.outputs.new-release-published == 'true'
      uses: docker/metadata-action@v5
      id: rc-meta
      with:
        images: |
          ${{ inputs.registry }}/${{ inputs.registry-repo }}
        tags: |
          type=raw,value=rc-${{ inputs.registry-tag-prefix }}${{ steps.semantic.outputs.release-version }}${{ inputs.registry-tag-suffix }}

    - name: release container metadata
      if: steps.semantic.outputs.new-release-published == 'true'
      uses: docker/metadata-action@v5
      id: meta
      with:
        images: |
          ${{ inputs.registry }}/${{ inputs.registry-repo }}
        tags: |
          type=raw,value=${{ inputs.registry-tag-prefix }}${{ steps.semantic.outputs.release-version }}${{ inputs.registry-tag-suffix }}

    - name: build and push rc container using inline cache
      if: steps.semantic.outputs.new-release-published == 'true'
      uses: docker/build-push-action@v5
      id: build
      with:
        file: ${{ inputs.build-file }}
        context: ${{ inputs.build-context }}
        tags: |
          ${{ steps.rc-meta.outputs.tags }}
          ${{ steps.branch-recent-meta.outputs.tags }}
          ${{ steps.rc-recent-meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        push: true
        github-token: ${{ github.token }}
        provenance: true
        cache-to: type=inline
        cache-from: |
          type=registry,ref=${{ steps.branch-recent-meta.outputs.tags }}
          type=registry,ref=${{ steps.rc-recent-meta.outputs.tags }}
          type=registry,ref=${{ steps.pr-recent-meta.outputs.tags }}

    - name: cosign image with key
      if: inputs.cosign-public-key != '' && steps.semantic.outputs.new-release-published == 'true'
      shell: bash
      run: |
        cosign sign --yes --key env://COSIGN_PRIVATE_KEY "${TAGS}@${DIGEST}"
      env:
        COSIGN_PRIVATE_KEY: ${{ inputs.cosign-private-key }}
        COSIGN_PASSWORD: ${{ inputs.cosign-password }}
        TAGS: ${{ steps.rc-meta.outputs.tags }}
        DIGEST: ${{ steps.build.outputs.digest }}

    - name: cosign verify image
      if: inputs.cosign-public-key != '' && steps.semantic.outputs.new-release-published == 'true'
      env:
        COSIGN_PUBLIC_KEY: ${{ inputs.cosign-public-key }}
        TAGS: ${{ steps.rc-meta.outputs.tags }}
        DIGEST: ${{ steps.build.outputs.digest }}
      shell: bash
      run: |
        cosign verify --key env://COSIGN_PUBLIC_KEY "${TAGS}@${DIGEST}"

    - name: annotate the ci run with release candidate container tags
      if: steps.semantic.outputs.new-release-published == 'true'
      shell: bash
      run: >-
        echo "::notice title=Job: ${{ github.job }} / ${{ inputs.job-name }}::%0A
        Pushed release candidate container assets!%0A
        - %0A
        docker pull ${{ steps.rc-meta.outputs.tags }}%0A
        docker pull ${{ inputs.registry }}/${{ inputs.registry-repo }}@${{ steps.build.outputs.digest }}"

    - name: test
      if: ${{ (inputs.test-flags != '' || inputs.test-args != '') && steps.semantic.outputs.new-release-published == 'true' }}
      shell: bash
      run: |
        docker run \
          ${{ inputs.test-flags }} \
          ${{ inputs.registry }}/${{ inputs.registry-repo }}@${{ steps.build.outputs.digest }} \
          ${{ inputs.test-args }}

    - name: build and push release container
      if: steps.semantic.outputs.new-release-published == 'true'
      uses: docker/build-push-action@v5
      id: build-release
      with:
        file: ${{ inputs.build-file }}
        context: ${{ inputs.build-context }}
        tags: |
          ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        push: true
        github-token: ${{ github.token }}
        provenance: true
        cache-from: |
          type=registry,ref=${{ steps.rc-meta.outputs.tags }}
          type=registry,ref=${{ steps.meta.outputs.tags }}

    - name: cosign image with key
      if: steps.semantic.outputs.new-release-published == 'true' && inputs.cosign-public-key != ''
      shell: bash
      run: |
        cosign sign --yes --key env://COSIGN_PRIVATE_KEY "${TAGS}@${DIGEST}"
      env:
        COSIGN_PRIVATE_KEY: ${{ inputs.cosign-private-key }}
        COSIGN_PASSWORD: ${{ inputs.cosign-password }}
        TAGS: ${{ steps.meta.outputs.tags }}
        DIGEST: ${{ steps.build-release.outputs.digest }}

    - name: cosign verify container
      if: steps.semantic.outputs.new-release-published == 'true' && inputs.cosign-public-key != ''
      env:
        COSIGN_PUBLIC_KEY: ${{ inputs.cosign-public-key }}
        TAG: ${{ steps.meta.outputs.tags }}
        DIGEST: ${{ steps.build-release.outputs.digest }}
      shell: bash
      run: |
        cosign verify --key env://COSIGN_PUBLIC_KEY "${TAG}@${DIGEST}"

    - name: release
      if: steps.semantic.outputs.new-release-published == 'true'
      uses: actions/github-script@v7
      id: release
      env:
        RELEASE_NOTES: |
          ${{ steps.semantic.outputs.release-notes }}
      with:
        retries: 3
        github-token: ${{ github.token }}
        script: |
          github.rest.repos.createRelease({
            owner: "${{ github.repository_owner }}",
            repo: "${{ github.event.repository.name }}",
            tag_name: "${{ inputs.registry-tag-prefix }}${{ steps.semantic.outputs.git-tag }}${{ inputs.registry-tag-suffix }}",
            target_commitish: "${{ github.sha }}",
            body: process.env.RELEASE_NOTES,
            name: "${{ inputs.registry-tag-prefix }}${{ steps.semantic.outputs.git-tag }}${{ inputs.registry-tag-suffix }}"
          });

    - name: annotate the ci run with release container tags
      if: steps.semantic.outputs.new-release-published == 'true'
      shell: bash
      run: >-
        echo "::notice title=Job: ${{ github.job }} / ${{ inputs.job-name }}::%0A
        Pushed release container version ${{ steps.semantic.outputs.release-version }}!%0A
        - %0A
        docker pull ${{ steps.meta.outputs.tags }}%0A
        docker pull ${{ inputs.registry }}/${{ inputs.registry-repo }}@${{ steps.build-release.outputs.digest }}"
#
#    - name: Merge release commit into the trunk branch
#      if: steps.semantic.outputs.new-release-published == 'true'
#      env:
#        USER: ${{ inputs.release-app-user }}
#        CLIENT_ID: ${{ inputs.release-app-client-id }}
#        TOKEN: ${{ steps.generate-release-token.outputs.token }}
#        REPO: ${{ github.repository }}
#        COMMIT: ${{ github.sha }}
#        TRUNK: main
#      shell: bash
#      run: |
#

    - name: update slack thread failure
      uses: archive/github-actions-slack@v2.7.0
      if: failure()
      continue-on-error: true
      with:
        slack-bot-user-oauth-access-token: ${{ inputs.slack-token }}
        slack-channel: ${{ inputs.slack-channel }}
        slack-text: |
          :no_entry: ${{ github.repository }} / ${{ github.job }} / ${{ inputs.job-name }}\n
          <https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}|:book: CI Logs>
