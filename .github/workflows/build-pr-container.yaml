on:
  workflow_call:
    inputs:

      job-name:
        description: "Job name to display on Slack messages."
        required: true
        type: string

      build-file:
        description: "Path to the container file."
        required: true
        type: string

      build-context:
        description: "Path to the build root dir."
        default: '.'
        type: string

      container-registry:
        description: "URL of the container registry."
        required: true
        type: string

      container-registry-user:
        description: "Username for the container registry."
        required: true
        type: string

      container-registry-repo:
        description: "Repo within container registry project."
        required: true
        type: string

      slack-channel:
        description: "ID of the Slack channel to post updates to."
        required: true
        type: string

      status-failure:
        description: "Failure status for the message header."
        default: ':no_entry:'
        type: string

      cosign-public-key:
        description: "Public key for cosigning images."
        required: false
        type: string

    secrets:

      slack-token:
        description: "Authentication token for Slack."
        required: true

      container-registry-token:
        description: "Authentication token for the container registry."
        required: true

      cosign-private-key:
        description: "Private key for cosigning images."
        required: false

      cosign-password:
        description: "Private key password for cosigning images."
        required: false

    outputs:

      meta:
        description: "Container metadata."
        value: ${{ jobs.build-pr-container.outputs.meta }}

      build:
        description: "Build output."
        value: ${{ jobs.build-pr-container.outputs.build }}

jobs:
  build-pr-container:
    runs-on: 
      labels: [self-hosted, linux, x64]
      group: heavy

    outputs:
      meta: ${{ toJSON(steps.meta.outputs) }}
      build: ${{ toJSON(steps.build.outputs) }}

    steps:
      - name: clone repo
        uses: actions/checkout@v3

      - name: install cosign
        if: inputs.cosign-public-key != ''
        uses: sigstore/cosign-installer@v3.1.2

      - name: forward proxy settings
        run: |
          echo "HTTP_PROXY=$HTTP_PROXY" >> $GITHUB_ENV
          echo "HTTPS_PROXY=$HTTPS_PROXY" >> $GITHUB_ENV
          echo "NO_PROXY=$NO_PROXY" >> $GITHUB_ENV

      - name: install buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            env.http_proxy=${{ env.HTTP_PROXY }}
            env.https_proxy=${{ env.HTTPS_PROXY }}
            "env.no_proxy='${{ env.NO_PROXY }}'"

      - name: login to container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ inputs.container-registry }}
          username: ${{ inputs.container-registry-user }}
          password: ${{ secrets.container-registry-token }}

      - name: container metadata
        uses: docker/metadata-action@v5
        id: meta
        with:
          images: |
            ${{ inputs.container-registry }}/${{ inputs.container-registry-repo }}
          tags: |
            type=ref,event=pr

      - name: build and push
        uses: docker/build-push-action@v5
        id: build
        with:
          file: ${{ inputs.build-file }}
          context: ${{ inputs.build-context }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          push: true
          github-token: ${{ github.token }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: true

      - name: cosign image with key
        if: inputs.cosign-public-key != ''
        run: |
          cosign sign --yes --key env://COSIGN_PRIVATE_KEY "${TAGS}@${DIGEST}"
        env:
          COSIGN_PRIVATE_KEY: ${{ secrets.cosign-private-key }}
          COSIGN_PASSWORD: ${{ secrets.cosign-password }}
          TAGS: ${{ steps.meta.outputs.tags }}
          DIGEST: ${{ steps.build.outputs.digest }}

      - name: cosign verify image
        if: inputs.cosign-public-key != ''
        env:
          COSIGN_PUBLIC_KEY: ${{ inputs.cosign-public-key }}
          TAGS: ${{ steps.meta.outputs.tags }}
          DIGEST: ${{ steps.build.outputs.digest }}
        run: |
          cosign verify --key env://COSIGN_PUBLIC_KEY "${TAGS}@${DIGEST}"

      - name: annotate the ci run with container tags
        run: >-
          echo "::notice title=Job: ${{ github.job }} / ${{ inputs.job-name }}::%0A
          Pushed PR container assets!%0A
          - %0A
          docker pull ${{ steps.meta.outputs.tags }}%0A
          ${{ steps.build.outputs.digest }}"

      - name: update slack thread failure
        uses: archive/github-actions-slack@v2.7.0
        continue-on-error: true
        if: failure()
        with:
          slack-bot-user-oauth-access-token: ${{ secrets.slack-token }}
          slack-channel: ${{ inputs.slack-channel }}
          slack-text: |
            *${{ github.repository }}*\n
            *PR-${{ github.event.pull_request.number }} Update*\n
            ${{ inputs.status-failure }} job: ${{ github.job }} / ${{ inputs.job-name }}\n
            <https://github.com/${{ github.repository }}/pull/${{ github.event.pull_request.number }}|:octocat: Pull Request>\n
            <https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}|:book: CI Logs>\n
            ```
            PR:       ${{ github.event.pull_request.title }}
            Branch:   ${{ github.head_ref }}
            Ref:      ${{ github.ref }}
            Sha:      ${{ github.event.pull_request.head.sha }}
            Workflow: ${{ github.workflow }}
            Run:      ${{ github.run_id }}
            ```
