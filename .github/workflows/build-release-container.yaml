on:
  workflow_call:
    inputs:

      job-name:
        description: "Job name to display on Slack messages."
        required: true
        type: string

      command:
        description: "Command to build the container named $IMAGE."
        required: true
        type: string

      release-version:
        description: "Semver version of the release."
        required: true
        type: string

      container-registry:
        description: "URL of the container registry."
        required: true
        type: string

      container-registry-user:
        description: "Username for the container registry."
        required: true
        type: string

      container-registry-project:
        description: "Project within container registry."
        required: true
        type: string

      container-registry-repo:
        description: "Repo within container registry project."
        required: true
        type: string

      container-tag-prefix:
        description: "Prefix to use when tagging container"
        required: true
        type: string

      container-tag-suffix:
        description: "Suffix to use when tagging container"
        required: true
        type: string

      slack-channel:
        description: "ID of the Slack channel to post updates to."
        required: true
        type: string

      slack-thread:
        description: "Slack thread to reply to."
        required: true
        type: string

      status-running:
        description: "Running status for the message header."
        default: ':hammer_and_wrench:'
        type: string

      status-success:
        description: "Success status for the message header."
        default: ':white_check_mark:'
        type: string

      status-failure:
        description: "Failure status for the message header."
        default: ':no_entry:'
        type: string

    secrets:

      slack-token:
        description: "Authentication token for Slack."
        required: true

      container-registry-token:
        description: "Authentication token for the container registry."
        required: true

    outputs:

      registry:
        description: "URL of the container registry."
        value: ${{ inputs.container-registry }}

      project:
        description: "Project within container registry."
        value: ${{ inputs.container-registry-project }}

      repo:
        description: "Repo within container registry project."
        value: ${{ inputs.container-registry-repo }}

      digest:
        description: "Docker pull URI with digest."
        value: ${{ jobs.build-release-container.outputs.digest }}

      rc-tag:
        description: "Docker pull URI with rc tag."
        value: ${{ jobs.build-release-container.outputs.rc-tag }}

jobs:
  build-release-container:
    runs-on: [ self-hosted, linux, x64 ]

    outputs:
      digest: ${{ env.DIGEST }}
      rc-tag: ${{ env.RC_TAG }}

    steps:
      - name: update slack thread
        uses: archive/github-actions-slack@v2.7.0
        id: slack
        continue-on-error: true
        with:
          slack-bot-user-oauth-access-token: ${{ secrets.slack-token }}
          slack-channel: ${{ inputs.slack-channel }}
          slack-optional-thread_ts: ${{ inputs.slack-thread }}
          slack-text: |
            ${{ inputs.status-running }}  job: ${{ github.job }} / ${{ inputs.job-name }}

      - name: build image uri
        run: |
          echo "IMAGE=${{ inputs.container-registry }}/${{ inputs.container-registry-project }}/${{ inputs.container-registry-repo }}" >> $GITHUB_ENV

      - name: create tags
        run: |
          echo "RC_TAG=${{ env.IMAGE }}:rc-${{ inputs.container-tag-prefix }}${{ inputs.release-version }}${{ inputs.container-tag-suffix }}" >> $GITHUB_ENV 

      - name: clone repo
        uses: actions/checkout@v3

      - name: login to container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ inputs.container-registry }}
          username: ${{ inputs.container-registry-user }}
          password: ${{ secrets.container-registry-token }}

      - name: pull container
        run: |
          docker pull ${{ env.RC_TAG }} || true

      - name: build container
        run: ${{ inputs.command }}

      - name: tag container
        run: |
          docker tag ${{ env.IMAGE }} ${{ env.RC_TAG }}

      - name: push container
        run: |
          docker push ${{ env.RC_TAG }}

      - name: container digest
        id: digest
        run: |
          echo "DIGEST=`docker inspect --format='{{index .RepoDigests 0}}' ${{ env.RC_TAG }}`" >> $GITHUB_ENV

      - name: annotate the ci run with container tags
        run: >-
          echo "::notice title=${{ github.job }} / ${{ inputs.job-name }}::%0A
          Pushed release candidate container assets!%0A
           --- %0A
          docker pull ${{ env.RC_TAG }}%0A
          docker pull ${{ env.DIGEST }}"

      - name: annotate the ci run on failure
        if: failure()
        run: >-
          echo "::error title=${{ github.job }} / ${{ inputs.job-name }}::%0A
          An unexpected error occurred. Check the job logs!"

      - name: update slack thread success
        uses: archive/github-actions-slack@v2.7.0
        continue-on-error: true
        with:
          slack-bot-user-oauth-access-token: ${{ secrets.slack-token }}
          slack-channel: ${{ inputs.slack-channel }}
          slack-function: update-message
          slack-update-message-ts: ${{ fromJson(steps.slack.outputs.slack-result).response.message.ts }}
          slack-update-message-text: |
            ${{ inputs.status-success }}  job: ${{ github.job }} / ${{ inputs.job-name }}

            ```
            Status: Pushed release candidate container assets!
            
            docker pull ${{ env.RC_TAG }}
            docker pull ${{ env.DIGEST }}
            ```

      - name: update slack thread failure
        uses: archive/github-actions-slack@v2.7.0
        if: failure()
        continue-on-error: true
        with:
          slack-bot-user-oauth-access-token: ${{ secrets.slack-token }}
          slack-channel: ${{ inputs.slack-channel }}
          slack-function: update-message
          slack-update-message-ts: ${{ fromJson(steps.slack.outputs.slack-result).response.message.ts }}
          slack-update-message-text: |
            ${{ inputs.status-failure }}  job: ${{ github.job }} / ${{ inputs.job-name }}
