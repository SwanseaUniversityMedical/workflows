name: Notify Slack on PR Review Request

on:
  workflow_call:
    inputs:
      pr_number:
        required: true
        type: string
      pr_title:
        required: true
        type: string
      pr_url:
        required: true
        type: string
      requester:
        required: true
        type: string
      reviewers:
        required: true
        type: string # comma-seperated GitHub usernames
    secrets:
      SLACK_WEBHOOK_URL:
        required: true

jobs:
  notify-slack:
    runs-on:
      labels: [ self-hosted, linux, x64 ]
      group: heavy
    steps:
      - name: Checkout Repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Read Slack - GitHub username mapping file
        id: read-map
        run: |
          if [ -f ".github/username-mappings.yaml" ]; then
            echo "Found .github/username-mappings.yaml"
          else
            echo ".github/username-mappings.yaml not found"
            echo "{}" > temp_mappings.yaml
          fi
      - name: Setup yq
        run: |
          sudo wget -qO /usr/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
          sudo chmod +x /usr/bin/yq

      - name: Restore Slack notification cache
        uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v 4.3.0
        id: slack-cache
        with:
          path: .github/slack-notified.json
          key: slack-pr-${{ github.event.pull_request.number }}

      - name: Send Slack notifications
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          echo "Preparing Slack notifications..."
          IFS=',' read -r -a reviewers <<< "${{ inputs.reviewers }}"

          mapping_file=".github/username-mappings.yaml"
          [ ! -f "$mapping_file" ] && mapping_file="temp_mappings.yaml"
          
          cache_file = ".github/slack-notified.json"
          now=$(date +%s)
          
          if [ -f "$cache_file" ]; then
            notified_json=$(cat "$cache_file")
          else
            notified_json='{}'
          fi
          
          yq -r 'keys | .[]' "$mapping_file"
          
          slack_mentions=()
          updated_json="$notified_json"
          
          for reviewer in "${reviewers[@]}"; do
            reviewer=$(echo "$reviewer" | xargs | tr -d '\r\n')
            last_notified=$(echo "$notified_json" | jq -r --arg r "$reviewer" '.[$r] // 0')
            slack_user=$(yq e ".\"$reviewer\"" "$mapping_file" 2>/dev/null || echo "null")
      
            if [ "$slack_user" != "null" ] && [ $((now - last_notified)) -ge 30 ]; then
              echo "Mapped Slack user: '$slack_user'"
              slack_mentions+=("$slack_user")
              updated_json=$(echo "$updated_json" | jq --arg r "$reviewer" --arg t "$now" '.[$r]=$t')
            else
              echo "Skipping $reviewer (last notified $last_notified seconds ago or no Slack mapping)"
            fi
          done
          
          if [ ${#slack_mentions[@]} -gt 0 ]; then
            mentions=$(IFS=' '; echo "${slack_mentions[*]}")
            message="Hey $mentions - *${{ inputs.requester }}* requested your review on <${{ inputs.pr_url }}|PR #${{ inputs.pr_number }}>: *${{ inputs.pr_title }}*"
            echo "Sending Slack message: $message"
            curl -X POST -H 'Content-type: application/json' \
              --data "{\"text\": \"$message\"}" \
              "$SLACK_WEBHOOK_URL"
          
          echo "$updated_json" > "$cache_file"
          else
            echo "No valid or new Slack users to notify."
          fi
