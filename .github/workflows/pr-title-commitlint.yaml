on:
  workflow_call:
    inputs:

      error-label:
        description: "Label to add on bad lints."
        default: ":black_nib: Bad PR Title"
        type: string

      comment-header:
        description: "Header line for the PR comment."
        default: ":black_nib: PR Title Commitlint"
        type: string

      comment-success:
        description: "Success message for the PR comment."
        default: ":heavy_check_mark: Lint success!"
        type: string

      comment-error:
        description: "Error message for the PR comment."
        default: ":x: Lint error! Fix title before merging!"
        type: string

      config:
        description: "Path to the commitlint config file within the repo."
        default: ".github/commitlint.config.mjs"
        type: string

jobs:
  lint:
    runs-on:
      labels: [self-hosted, linux, x64]
      group: light
    steps:
      - name: clone config from repo
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            ${{ inputs.config }}

      - name: install node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: cache node modules
        uses: actions/cache@v4.0.2
        with:
          path: ~/.npm
          key: ${{ github.workflow }}-commitlint

      - name: install commitlint
        shell: bash
        run: |
          npm install @commitlint/config-conventional @commitlint/cli

      - name: lint pr title
        id: commitlint
        shell: bash
        run: |
          set +e
          lint=$(echo "$TITLE" | npx commitlint --config="$CONFIG" --help-url="$CONFIG")
          status=$?
          echo "$lint"
          printf "lint<<EOF\n%s\nEOF" "${lint}" >> "$GITHUB_OUTPUT"
          exit $status
        env:
          TITLE: ${{ github.event.pull_request.title }}
          CONFIG: ${{ inputs.config }}

      - name: lint title docker
        id: dockerlint
        shell: bash
        run: |
          docker build containers/commitlint/Dockerfile --tag 'commitlint'
          echo ${{ github.event.pull_request.title }} | docker run commitlint --config=${{ inputs.config }} --help-url=${{ inputs.config }}
        env:
          TITLE: ${{ github.event.pull_request.title }}
          CONFIG: ${{ inputs.config }}

      - name: create step summary on bad lint
        if: always() && steps.commitlint.outcome != 'success'
        shell: bash
        run: |
          printf "%s" "${SUMMARY}" >> "$GITHUB_STEP_SUMMARY"
          printf "COMMENT_BODY<<EOF\n%s\nEOF" "${SUMMARY}" >> "$GITHUB_ENV"
        env:
          # Note the intentional double spaces at the end of some lines. This is markdown.
          SUMMARY: |
            #### ${{ inputs.comment-header }} - ${{ inputs.comment-error }}
            Expected PR title to be conventional commit format: ie. `type(scope): summary`
            ```
            ${{ steps.commitlint.outputs.lint }}
            ```
            Conventional Commits :open_book: [Docs](https://www.conventionalcommits.org/en/v1.0.0)  
            Commitlint :file_cabinet: [Config](https://github.com/${{ github.repository }}/blob/${{ github.sha }}/${{ inputs.config }}) :open_book: [Docs](https://commitlint.js.org/reference/rules)   

      - name: create step summary on good lint
        if: always() && steps.commitlint.outcome == 'success'
        shell: bash
        run: |
          printf "%s" "${SUMMARY}" >> "$GITHUB_STEP_SUMMARY"
          printf "COMMENT_BODY<<EOF\n%s\nEOF" "${SUMMARY}" >> "$GITHUB_ENV"
        env:
          SUMMARY: |
            #### ${{ inputs.comment-header }} - ${{ inputs.comment-success }}

      - name: find pr comment
        uses: peter-evans/find-comment@v3
        if: always()
        id: find-pr-comment
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body-includes: ${{ inputs.comment-header }}
          comment-author: "github-actions[bot]"

      - name: create or update pr comment
        uses: peter-evans/create-or-update-comment@v4
        if: always() && (steps.commitlint.outcome == 'success' || steps.commitlint.outcome == 'failure')
        with:
          comment-id: ${{ steps.find-pr-comment.outputs.comment-id }}
          issue-number: ${{ github.event.pull_request.number }}
          edit-mode: replace
          body: |
            ${{ env.COMMENT_BODY }}

      - name: add error label on bad lint
        uses: actions/github-script@v7.0.1
        if: always() && steps.commitlint.outcome == 'failure'
        with:
          script: |
            github.rest.issues.addLabels({
              issue_number: ${{ github.event.pull_request.number }},
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ["${{ inputs.error-label }}"]
            })

      - name: remove error label on successful lint
        uses: actions/github-script@v7.0.1
        if: always() && steps.commitlint.outcome == 'success'
        continue-on-error: true
        with:
          script: |
            github.rest.issues.removeLabel({
              issue_number: ${{ github.event.pull_request.number }},
              owner: context.repo.owner,
              repo: context.repo.repo,
              name: "${{ inputs.error-label }}"
            })
