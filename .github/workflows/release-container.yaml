on:
  workflow_call:

    inputs:

      runs-on:
        description: "The Github Actions host runner to use for compute. i.e. ubuntu-latest is a Github hosted runner."
        required: true
        type: string

      git-clone-dir:
        description: "The directory context to clone the git commit into."
        default: "."
        type: string

      path-filter:
        description: "Filters used to detect if relevant files have changed."
        default: |
          src:
            - '**'
        type: string

      release-dry-run:
        description: "When true determines if a release should happen and what type without actually performing the release."
        default: true
        type: boolean

      release-branches:
        description: "JSON encoded list of regex patterns to select release branches."
        default: |
          [
            '+([0-9])?(.{+([0-9]),x}).x',
            'main'
          ]
        type: string

      release-tag-format:
        description: "Release tag format string (defers templating to release time)."
        default: '${version}'
        type: string

      release-rules:
        description: "JSON encoded list of semantic-release release rules."
        default: |
          [
            {"type": "major", "release": "major"},
            {"type": "minor", "release": "minor"},
            {"type": "patch", "release": "patch"},
            {"type": "no-release", "release": false},

            {"type": "chore", "release": "patch"},
            {"type": "refactor", "release": "patch"},
            {"type": "style", "release": "patch"},

            {"type": "docs", "release": false},
            {"type": "test", "release": false},
            {"type": "ci", "release": false},

            {"type": "feat", "release": "minor"},

            {"type": "revert", "release": "patch"},
            {"type": "perf", "release": "patch"},
            {"type": "fix", "release": "patch"},
            {"type": "build", "release": "patch"},
          ]
        type: string

      docker-context-dir:
        description: "The directory context to execute the docker build within. i.e. Inside the Dockerfile RUN commands, this is the directory that they see as PWD."
        default: "."
        type: string

      docker-file-path:
        description: "Path to the Dockerfile to build the container from."
        default: "Dockerfile"
        type: string

      docker-registry:
        description: "Root url for the Docker registry to use. e.g. https://harbor.ukserp.ac.uk"
        required: true
        type: string

      docker-registry-project:
        description: "Name of the project within the registry that the containers should be pushed into. i.e. my-project."
        required: true
        type: string

      docker-registry-repo:
        description: "Name of the image within the project that the containers should named as. i.e. my-image."
        required: true
        type: string

      docker-registry-tag-format:
        description: "A json formatted list of Docker tag formats used by the semantic-release-docker plugin when pushing built containers to the registry."
        default: '["latest", "{{version}}", "{{major}}-latest", "{{major}}.{{minor}}"]'
        type: string

      docker-registry-user:
        description: "Authentication user for the docker registry."
        required: true
        type: string

      github-app-id:
        description: "App ID for Github App authentication."
        required: true
        type: string

    secrets:

      docker-registry-token:
        description: "Authentication token for the docker registry."
        required: true

      github-app-private-key:
        description: "Private key for Github App authentication."
        required: true

jobs:

  release-container:
    runs-on: ${{ inputs.runs-on }}

    steps:

      - name: clone repo
        uses: actions/checkout@v3

      - name: detect changed files
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: ${{ inputs.path-filter }}

      - name: generate token
        if: steps.changes.outputs.src == 'true'
        id: generate-token
        uses: tibdex/github-app-token@v1.8.0
        with:
          app_id: ${{ inputs.github-app-id }}
          private_key: ${{ secrets.github-app-private-key }}

      - name: registry login
        if: steps.changes.outputs.src == 'true'
        run: |
          echo "DOCKER_REGISTRY_TOKEN" | docker login $DOCKER_REGISTRY -u $DOCKER_REGISTRY_USER --password-stdin
        env:
          DOCKER_REGISTRY: ${{ inputs.docker-registry }}
          DOCKER_REGISTRY_USER: ${{ inputs.docker-registry-user }}
          DOCKER_REGISTRY_TOKEN: ${{ secrets.docker-registry-token }}

      - name: semantic release
        if: steps.changes.outputs.src == 'true'
        uses: docker://ghcr.io/codfish/semantic-release-action:v2
        id: release
        with:
          dry_run: ${{ inputs.release-dry-run }}
          branches: ${{ inputs.release-branches }}
          tag_format: ${{ inputs.release-tag-format }}

          additional_packages: |
            ['@codedependant/semantic-release-docker']

          plugins: |-
            [
              ['@semantic-release/commit-analyzer', {
                "releaseRules": ${{ inputs.release-rules }},
              }], 
            
              ['@semantic-release/release-notes-generator', {
                
              }],
            
              ['@codedependant/semantic-release-docker', {
                "dockerLogin": false,
                "dockerContext": '${{ inputs.docker-context-dir }}',
                "dockerFile": '${{ inputs.docker-file-path }}',
                "dockerArgs": {
                  GITHUB_TOKEN: null
                },
                "dockerRegistry": '${{ inputs.docker-registry }}',
                "dockerProject": '${{ inputs.docker-registry-project }}',
                "dockerImage": '${{ inputs.docker-registry-repo }}',
                "dockerTags": ['{{version}}']
              }]
            
              ['@semantic-release/github', {
                "successComment": false,
                "failTitle": false
              }]
            ]

        env:
          GITHUB_TOKEN: ${{ steps.generate-token.outputs.token }}